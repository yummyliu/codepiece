#include <sys/types.h>
#include <signal.h>
#include <signal.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>

int numofchild = 0;
static void sighandler(int signo)
{
	switch (signo) {
		case SIGCHLD:
			printf("caught SIGCHLD: %d\n", signo);
			break;
		case SIGINT:
			printf("caught SIGINT: %d\n", signo);
			break;
		default:
			printf("caught UnKnown: %d\n", signo);
			break;
	}
}

int main() {
	char cmd[1000], buf[1000], *argv[2];
	int pid;

	struct sigaction abc;
	abc.sa_handler = sighandler;
	sigemptyset(&abc.sa_mask);
	abc.sa_flags = 0;

	sigaction(SIGCHLD, &abc, NULL);
	sigaction(SIGINT, &abc, NULL);
	memset(&abc, 0, sizeof(struct sigaction));

	while(1) {
		while(fgets(buf, 100, stdin) == NULL);
		sscanf(buf, "%s", cmd);
		printf("%d children, command = %s\n", numofchild, cmd);
		fflush(stdout);
		if (strcmp(cmd, "quit") == 0) {
			if (numofchild == 0) exit(0);
			else printf("Cannot exit, there are still %d children.\n", numofchild);
		}
		if ((pid = fork()) == 0) {
			argv[0] = cmd, argv[1] = NULL;
			execv(argv[0], argv); exit(0);
		}
		if (pid != -1) numofchild ++;
	}
} /* example6.c */
